@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudText>My Application</MudText>
                <MudSpacer />
                <MudMenu>
                    <ActivatorContent>
                        <MudAvatar Variant="Variant.Outlined" Size="Size.Medium">
                            <MudIcon Icon="@Icons.Material.Filled.AccountCircle" />
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudList T="string">
                            <MudListItem>
                                <MudText>Usuário: @userName</MudText>
                            </MudListItem>
                            <MudDivider />
                            <MudListItem OnClick="Logout">
                                <MudButton Variant="Variant.Outlined" OnClick="Logout" Color="Color.Success">
                                    Deslogar
                                </MudButton>
                            </MudListItem>
                        </MudList>
                    </ChildContent>
                </MudMenu>
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen">
                <AppNavMenu />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>

    <MudMainContent>
        @Body
    </MudMainContent>
    <AuthorizeView>
        <NotAuthorized>
            <MudAppBar Bottom="true" Elevation="1" Fixed="true">
                <MudSpacer />
                <MudButton Variant="Variant.Text" OnClick="ToggleMode">
                    <MudIcon Color="@(_isDarkMode ? Color.Info : Color.Warning)" Icon="@Icons.Material.Outlined.LightMode" />
                    <MudIcon Color="Color.Default" Icon="@(_isDarkMode ? Icons.Material.Outlined.ArrowForward : Icons.Material.Outlined.ArrowBack)" />
                    <MudIcon Color="@(_isDarkMode ? Color.Warning : Color.Info)" Icon="@Icons.Material.Outlined.ModeNight" />
                </MudButton>
            </MudAppBar>
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    private MudTheme _theme = new();
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = default!;

    private bool _isLoggedIn;
    private string? userName;
    bool _drawerOpen = true;

    [Inject] private AuthService AuthService { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await CheckAuthenticationStatus();
            StateHasChanged();
            AuthService.OnAuthenticationStateChanged += HandleAuthenticationStateChanged;
        }
    }

    private async Task CheckAuthenticationStatus()
    {
        _isLoggedIn = await AuthService.IsLoggedIn();
        if (_isLoggedIn)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            userName = authState.User!.Identity!.Name;
        }
    }

    private void HandleAuthenticationStateChanged()
    {
        InvokeAsync(async () =>
        {
            await CheckAuthenticationStatus();
            StateHasChanged(); // Atualiza a interface ao detectar mudanças
        });
    }

    private async Task Logout()
    {
        if (_isLoggedIn)
        {
            // Logout
            await AuthService.LogoutAsync();
            _isLoggedIn = false;

            // Redireciona para a tela de login
            Navigation.NavigateTo("/");
        }
    }

    public void Dispose()
    {
        // Remove a inscrição do evento ao descartar o componente
        AuthService.OnAuthenticationStateChanged -= HandleAuthenticationStateChanged;
    }

    private void ToggleMode()
    {
        _isDarkMode = !_isDarkMode;
    }
}
