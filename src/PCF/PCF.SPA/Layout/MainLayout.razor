@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
                <MudText>Plataforma de Controle Financeiro Pessoal</MudText>
                <MudSpacer />
                <MudMenu>
                    <ActivatorContent>
                        <MudAvatar Variant="Variant.Outlined" Size="Size.Medium">
                            <MudIcon Icon="@Icons.Material.Filled.AccountCircle" />
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudList T="string">
                            <MudListItem>
                                <MudText>Usuário: @userName</MudText>
                            </MudListItem>
                            <MudDivider />
                            <MudListItem OnClick="Logout">
                                <MudButton Variant="Variant.Outlined" OnClick="Logout" Color="Color.Success">
                                    Deslogar
                                </MudButton>
                            </MudListItem>
                        </MudList>
                    </ChildContent>
                </MudMenu>
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen">
                <AppNavMenu OnLogout="Logout" />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    <MudMainContent>
        @Body
    </MudMainContent>
    <MudDivider style="height:60px;width:0px;"></MudDivider>
    <MudAppBar Bottom="true" Elevation="1" Fixed="true">
        <MudSpacer />
        <MudButton Variant="Variant.Text" OnClick="ToggleMode">
            <MudIcon Color="@(_isDarkMode ? Color.Info : Color.Warning)" Icon="@Icons.Material.Outlined.LightMode" />
            <MudIcon Color="Color.Default" Icon="@(_isDarkMode ? Icons.Material.Outlined.ArrowForward : Icons.Material.Outlined.ArrowBack)" />
            <MudIcon Color="@(_isDarkMode ? Color.Warning : Color.Info)" Icon="@Icons.Material.Outlined.ModeNight" />
        </MudButton>
    </MudAppBar>
</MudLayout>

@code {
    private MudTheme _theme = new();
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = default!;
    private bool _isLoggedIn;
    private string? userName;
    bool _drawerOpen = true;

    [Inject] private AuthManagerService AuthManagerService { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private Blazored.LocalStorage.ILocalStorageService LocalStorage { get; set; } = default!;  // 📌 Adicionando Local Storage

    protected override async Task OnInitializedAsync()
    {
        // Verifica autenticação inicial
        await CheckAuthenticationStatus();

        // Carrega o modo escuro salvo no Local Storage
        _isDarkMode = await LocalStorage.GetItemAsync<bool>("darkMode");

        // Inscreve no evento de mudança de estado (apenas uma vez)
        AuthManagerService.OnAuthenticationStateChanged += HandleAuthenticationStateChanged;
    }

    private async Task CheckAuthenticationStatus()
    {
        _isLoggedIn = await AuthManagerService.IsLoggedInAsync();
        if (_isLoggedIn)
        {
            var authState = await AuthManagerService.GetAuthenticationStateAsync();
            userName = authState.User.Identity?.Name;
        }
        else
        {
            userName = null;
        }

        StateHasChanged(); // Apenas uma atualização da UI após verificação do status
    }

    private void HandleAuthenticationStateChanged()
    {
        InvokeAsync(CheckAuthenticationStatus);
    }
    private async Task Logout()
    {
        if (_isLoggedIn)
        {
            await AuthManagerService.LogoutAsync();

            //Notifica o sistema sobre a mudança no estado de autenticação
            await AuthManagerService.NotifyAuthenticationStateChangedAsync();

            _isLoggedIn = false;
            userName = null;

            StateHasChanged(); //Atualiza a interface imediatamente

            //Garante que a página seja recarregada corretamente
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }
    public void Dispose()
    {
        // Remove a inscrição do evento ao descartar o componente
        AuthManagerService.OnAuthenticationStateChanged -= HandleAuthenticationStateChanged;
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private async Task ToggleMode()
    {
        _isDarkMode = !_isDarkMode;
        await LocalStorage.SetItemAsync("darkMode", _isDarkMode); // 📌 Salva no Local Storage
    }
}
