@page "/register"
@inject NavigationManager Navigation
@inject AuthManagerService AuthManagerService
@inject ISnackbar Snackbar

<MudCard Style="max-width: 400px; margin: auto; margin-top: 50px;">
    <MudCardContent>
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Registro</MudText>
        <MudForm Model="@loginResponse" @ref="registerForm" >
            <MudTextField Class="mb-3" Label="Nome" @bind-Value="loginResponse.Name" Required="true"
                          RequiredError="Nome é obrigatório." />

            <MudTextField Class="mb-3" Label="E-mail" @bind-Value="loginResponse.Login" Required="true"
                          RequiredError="E-mail é obrigatório." type="email" Placeholder="exemplo@email.com" />

            <!-- Campo de Senha -->
            <MudTextField Class="mb-3" Label="Senha" @bind-Value="loginResponse.Password" Required="true"
                          RequiredError="Senha é obrigatória." type="password" InputType="InputType.Password"
                          Immediate="true" Validation="(string senha) => ValidarSenha(senha)" />

            <!-- Confirmação de Senha -->
            <MudTextField Class="mb-3" Label="Confirme a Senha" @bind-Value="loginResponse.ConfirmedPassword" Required="true"
                          RequiredError="Confirmação de senha é obrigatória." type="password" InputType="InputType.Password"
                          Immediate="true" Validation="(string confSenha) => ValidarConfirmacaoSenha(confSenha)" />


            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleRegisterAsync">
                Registrar
            </MudButton>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudText Typo="Typo.caption" Align="Align.Center">
            Já possui uma conta?
            <MudLink OnClick="IrParaLogin">Login</MudLink>
        </MudText>
    </MudCardActions>
</MudCard>

@code {
    private MudForm? registerForm;
    private LoginResponse loginResponse = new();

    private void IrParaLogin()
    {
        Navigation.NavigateTo("/");
    }

    private async Task HandleRegisterAsync()
    {
        await registerForm!.Validate();
        if (!registerForm.IsValid)
        {
            Snackbar.Add("Corrija os erros antes de registrar.", Severity.Warning);
            return;
        }

        // Chamada correta para RegisterAsync
        var resultado = await AuthManagerService.RegisterAsync(loginResponse);

        if (resultado.IsSuccess )
        {
            Snackbar.Add(resultado.Value, Severity.Success);
            Navigation.NavigateTo("/");
            return;
        }

        Snackbar.Add(string.Join(", ", resultado.Errors.Select(e => e.Message)), Severity.Error);
    }

    private string? ValidarSenha(string senha)
    {
        if (string.IsNullOrEmpty(senha))
            return "A senha é obrigatória.";

        if (senha.Length < 8)
            return "A senha deve ter pelo menos 8 caracteres.";

        if (!senha.Any(char.IsUpper))
            return "A senha deve conter pelo menos uma letra maiúscula.";

        if (!senha.Any(char.IsLower))
            return "A senha deve conter pelo menos uma letra minúscula.";

        if (!senha.Any(char.IsDigit))
            return "A senha deve conter pelo menos um número.";

        if (!senha.Any(c => "!@#$%^&*()_+{}[]:;<>,.?/~".Contains(c)))
            return "A senha deve conter pelo menos um caractere especial (!@#$%^&* etc.).";

        return null; // Senha válida
    }

    private string? ValidarConfirmacaoSenha(string confSenha)
    {
        if (confSenha != loginResponse.Password)
            return "As senhas não coincidem.";

        return null; // Confirmação válida
    }
}
