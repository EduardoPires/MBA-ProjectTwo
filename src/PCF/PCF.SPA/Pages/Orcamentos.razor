@page "/orcamentos"
@using PCF.SPA.Components.Orcamento
@attribute [Authorize]
@inject IWebApiClient WebApiClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>PCF - Orçamentos</PageTitle>

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddOrcamentoDialog">Adicionar orçamento</MudButton>
    <MudDataGrid T="OrcamentoResponse" Items="_orcamentos" Loading="_loading" Hover="true" Bordered="false" Striped="false" Filterable="false" EditMode="DataGridEditMode.Form" ReadOnly="false" CommittedItemChanges="@CommitEdit">
        <Columns>
            <PropertyColumn Property="x => x.OrcamentoId" Title="ID" Editable="false" />
            <PropertyColumn Property="x => x.ValorLimite" Title="Valor Limite" Editable="true" Required="true" Format="C">
                <EditTemplate>
                    <br />
                    <MudTextField @bind-Value="@context.Item.ValorLimite" Label="Valor Limite" Required="true" Format="C" T="double" Validation="@(new Func<double, IEnumerable<string>>(ValidateValor))" />
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.NomeCategoria" Title="Categoria" Editable="false" Required="false" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" title="Editar" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeleteOrcamento(context.Item.OrcamentoId)" title="Excluir" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    private IEnumerable<OrcamentoResponse> _orcamentos = [];
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrcamentosAsync();
    }

    private IEnumerable<string> ValidateValor(double value)
    {
        if (value <= 0)
        {
            yield return "Valor deve ser maior que zero";
            yield break;
        }
    }

    private async Task LoadOrcamentosAsync()
    {
        _loading = true;
        try
        {
            _orcamentos = await WebApiClient.OrcamentosAllAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro não esperado: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenAddOrcamentoDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AdicionarOrcamentoDialog>("Novo orçamento", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await LoadOrcamentosAsync();
        }
    }

    private async Task CommitEdit(OrcamentoResponse item)
    {
        var request = new OrcamentoRequest
            {
                ValorLimite = item.ValorLimite,
                CategoriaId = item.CategoriaId
            };

        _loading = true;

        try
        {
            await WebApiClient.OrcamentosPUTAsync(item.OrcamentoId, request);
            Snackbar.Add("Orçmento atualizado com sucesso", severity: Severity.Success);
        }
        catch (ApiException e) when (e.StatusCode == (int)HttpStatusCode.NotFound)
        {
            Snackbar.Add("Orçamento inexistente", Severity.Warning);
        }
        catch (ApiException<IEnumerable<string>> e) when (e.StatusCode == (int)HttpStatusCode.BadRequest && e.Result.Any())
        {
            Snackbar.Add(string.Join(", ", e.Result), Severity.Warning);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao atualizar orçamento: {ex.Message}", Severity.Error);
        }
        finally
        {
            await LoadOrcamentosAsync();
            _loading = false;
        }
    }

    private async Task DeleteOrcamento(int id)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };

        bool? result = await DialogService.ShowMessageBox(
            "Confirmação",
            "Tem certeza que deseja deletar este orçamento?",
            yesText: "Sim", cancelText: "Não", options: options);

        if (result == true)
        {
            try
            {
                await WebApiClient.OrcamentosDELETEAsync(id);
                Snackbar.Add("Orçamento removido com sucesso.", Severity.Success);
                await LoadOrcamentosAsync();
            }
            catch (ApiException e) when (e.StatusCode == (int)HttpStatusCode.NotFound)
            {
                Snackbar.Add("Orçamento inexistente", Severity.Warning);
            }
            catch (ApiException<IEnumerable<string>> e) when (e.StatusCode == (int)HttpStatusCode.BadRequest && e.Result.Any())
            {
                Snackbar.Add(string.Join(", ", e.Result), Severity.Warning);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao deletar orçamento: {ex.Message}", Severity.Error);
            }
        }
    }
}