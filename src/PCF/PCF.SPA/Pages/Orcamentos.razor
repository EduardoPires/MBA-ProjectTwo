@page "/orcamentos"
@using PCF.SPA.Components.Orcamento
@attribute [Authorize]
@inject IWebApiClient WebApiClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Orçamentos</PageTitle>

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddOrcamentoDialog">Adicionar orçamento</MudButton>
    <MudDataGrid T="OrcamentoResponseViewModel" Items="_orcamentos" Loading="_loading" Hover="true" Bordered="false" Striped="true" Filterable="false">
        <Columns>
            <PropertyColumn Property="x => x.OrcamentoId" Title="ID" />
            <PropertyColumn Property="x => x.ValorLimite" Title="Valor Limite" />
            <PropertyColumn Property="x => x.NomeUsuario" Title="Usuário" />
            <PropertyColumn Property="x => x.NomeCategoria" Title="Categoria" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" OnClick="() => DeleteOrcamento(context.Item.OrcamentoId)" title="Excluir" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    private IEnumerable<OrcamentoResponseViewModel> _orcamentos = [];
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrcamentosAsync();
    }

    private async Task LoadOrcamentosAsync()
    {
        _loading = true;
        try
        {
            _orcamentos = await WebApiClient.OrcamentosAllAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro não esperado: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenAddOrcamentoDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AdicionarOrcamentoDialog>("Novo orçamento", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await LoadOrcamentosAsync();
        }
    }

    private async Task DeleteOrcamento(int id)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };

        bool? result = await DialogService.ShowMessageBox(
            "Confirmação",
            "Tem certeza que deseja deletar este orçamento?",
            yesText: "Sim", cancelText: "Não", options: options);

        if (result == true)
        {
            try
            {
                await WebApiClient.OrcamentosDELETEAsync(id);
                Snackbar.Add("Orçamento removido com sucesso.", Severity.Success);
                await LoadOrcamentosAsync();
            }
            catch (ApiException e) when (e.StatusCode == (int)HttpStatusCode.NotFound)
            {
                Snackbar.Add("Orçamento inexistente", Severity.Warning);
            }
            catch (ApiException<IEnumerable<string>> e) when (e.StatusCode == (int)HttpStatusCode.BadRequest && e.Result.Any())
            {
                Snackbar.Add(string.Join(", ", e.Result), Severity.Warning);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao deletar orçamento: {ex.Message}", Severity.Error);
            }
        }
    }
}