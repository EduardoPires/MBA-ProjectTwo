@page "/"

<MudCard Style="max-width: 400px; margin: auto; margin-top: 50px;">
    <MudCardContent>
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Login</MudText>
        <MudForm Model="@loginResponse" @ref="loginForm" Validated="HandleValidation">
            <MudTextField Class="mb-3" Label="E-mail" @bind-Value="loginResponse.Login" Required="true"
                          RequiredError="E-mail é obrigatório." Type="email" Placeholder="exemplo@email.com" Immediate="true" />
            <MudTextField Class="mb-4" Label="Senha" @bind-Value="loginResponse.Password" Required="true"
                          RequiredError="Senha é obrigatória." Type="password" Immediate="true" InputType="InputType.Password" />
            <MudText Color="Color.Error" Typo="Typo.caption" Style="margin-top: 10px;" Hidden="@string.IsNullOrWhiteSpace(errorMessage)">
                @errorMessage
            </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleLogin" Disabled="@isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    <MudText>Entrar</MudText>
                }
            </MudButton>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudText Typo="Typo.caption" Align="Align.Center">
            Ainda não tem uma conta?
            <MudLink OnClick="IrParaRegistro">Registrar-se</MudLink>
        </MudText>
    </MudCardActions>
</MudCard>

@code {
    private MudForm? loginForm;
    private LoginResponse loginResponse = new();
    private string? errorMessage;
    private bool isLoading;

    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private AuthManagerService AuthManagerService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Evita chamar `StateHasChanged()` desnecessariamente
        if (await AuthManagerService.IsLoggedInAsync())
        {
            Navigation.NavigateTo("/home", forceLoad: true);
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged(); // Atualiza a UI imediatamente para refletir o estado do botão

        // Força a validação do formulário
        if (loginForm is not null)
        {
            await loginForm.Validate();
        }

        if (loginForm is null || !loginForm.IsValid)
        {
            errorMessage = "Preencha os campos obrigatórios corretamente.";
            isLoading = false;
            StateHasChanged();
            return;
        }

        try
        {
            var success = await AuthManagerService.LoginAsync(loginResponse);
            if (success)
            {
                // Redireciona para a home e força o carregamento da página para garantir que a autenticação foi processada corretamente
                Navigation.NavigateTo("/home", forceLoad: true);
            }
            else
            {
                errorMessage = "Credenciais inválidas. Por favor, tente novamente.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao realizar login: {ex.Message}";
        }

        isLoading = false;
        StateHasChanged(); // Atualiza a UI após erro ou sucesso
    }

    private void HandleValidation()
    {
        StateHasChanged();
    }

    private void IrParaRegistro()
    {
        Navigation.NavigateTo("/register");
    }
}
